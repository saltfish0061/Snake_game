Graphic representation of this game
    SnakeHead: '@';
    SnakeBody: 'O';
    Fruit: '*';
    Obstacle: 'X';
    Fence: '#';


Logic of the game:

1. Define Constants 
    Set the width and height of the game board.
    Define initial speed and score values.

2. Initialize Game Board
    Create a 2D board array with spaces and borders (# for the fence).
    Initialize the game objects: Snake, Food, and Obstacles.

3. Main Loop
    While the game is running:
        Display the homepage and instructions.
        Ask the player to select a difficulty level:
            Each level sets a specific number of obstacles and speed cap.
        User can choose to exit the game or back to previous interface by pressing 'q' (Quit).

4. Game Start
    Place the snake at the center of the board.
    Generate the first food item on a random, valid position.
    Place obstacles on random, valid positions.

5. Game Loop
    While the snake has not collided with walls, itself, or obstacles:
        Check Food Capture:
            If the snake head is on the same position as the food:
                Increase snake size.
                Increase the score.
                Generate new food and obstacles at random, valid positions.
                Increase game speed if within the speed cap.
        Move the Snake:
            Read player input (W, A, S, D) to control direction(reverse direction will be ignored).
            Move the snake in the chosen direction.
        Collision Detection:
            Check if the snake head collides with:
                a. The fence.
                b. Its own body.
                c. An obstacle.
            If any collision occurs, exit the game loop.
        Update Game Display:
            Clear and re-draw the board with:
                The snake, food, and obstacles in their current positions.
            Display the updated score and speed level.
            Delay the game loop based on the current speed.

6. Game Over Sequence
    Display death animation for the snake
    Display "Game Over" message with the final score.

7. Restart Option
    Return to the homepage for the player to start a new game or exit(Back to Main loop).




Class Descriptions

1. Snake Class
    Attributes:
        Size: Current length of the snake.
        Body: Array of coordinates representing each segment of the snake.
    Methods:
        initializeSnake: Set the initial position and size of the snake.
        snakeCapture: Check if the snake head is at the same position as the food.
        snakeCollide: Check if the snake head collides with walls, itself, or obstacles.
        snakeGrow: Increase the snake size when food is captured.
        snakeMove: Move the snake in the current direction and update body segments.

2. Food Class
    Attributes:
        Location: Coordinates of the food.
    Methods:
        generateFood: Place food on a random, valid position on the board.

3. Obstacle Class
    Attributes:
        Location: Coordinates of each single obstacle.
        Obstacle List: List of multiple obstacles for higher difficulty levels.
    Methods:
        generateObstacle: Place obstacles at random, valid positions on the board.



Description of some #include header files to be used

1. <conio.h>
    Provides console input/output functions
        Application: use _kbhit() to detect if user input something and _getch() to get the character that pressed

2. <sstream>
    Provides text manipulation like a stream, makes double buffering smoother.
    Application: use ostringstream object (output) for building the game board as a string before printing it all at once, avoid screen flickering.

3. <windows.h>
    Provides Windows-specific functions for handling the Windows API(get the console cursor).
    Application: use SetConsoleCursorPosition , Sleep (for game delays), and SetConsoleCursorInfo (hide the cursor during gameplay)

4. <ctime>
    Provides time-related functions(random).
    Application: used srand(time(NULL)) to get random seed for each unique value




Buffer:
########################################
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
########################################

########################################
#       *                              #
#                                      #
#          X                           #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                      #
#                                   o@ #
# X       X                            #
#                                      #
#                                      #
#                                      #
#                                      #
#                          X       X   #
#                                      #
#                                      #
########################################